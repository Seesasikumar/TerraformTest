name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger: none

# Don't run against PRs
pr: none

variables:
  - name: backendServiceArm
    value: 'azure-devops-journey-may2024'
  - name: backendAzureRmResourceGroupName
    value: 'devops-journey-rg-may2024'
  - name: backendAzureRmStorageAccountName
    value: 'devopsjourneymay2024'
  - name: backendAzureRmContainerName
    value: 'tfstate'
  - name: backendAzureRmKey
    value: 'terraform.tfstate'
  - name: environment
    value: 'production'
  - name: terraform_version
    value: '1.8.4'
  - name: repository
    value: 'devopsjourney'
  - name: dockerfile
    value: '$(Build.SourcesDirectory)/aspnet-core-dotnet-core/Dockerfile'
  - name: containerRegistry
    value: 'devopsjourneymay2024acr.azurecr.io'
  - group: devopsjourney
stages :          
  - stage: plan
    jobs:
      - job: terraform_plan_production
        steps:
        - task: TerraformInstaller@1
          displayName: 'install'
          inputs:
            terraformVersion: ${{ variables.terraform_version}}
        - task: TerraformTaskV4@4
          displayName: 'init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: ${{ variables.backendServiceArm }}
            backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
            backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
            backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
            backendAzureRmKey: ${{ variables.backendAzureRmKey }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        - task: TerraformTaskV4@4
          displayName: 'plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '-input=false -var-file="../vars/${{ variables.environment }}.tfvars"'
            environmentServiceNameAzureRM: ${{ variables.backendServiceArm }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

  - stage: apply
    dependsOn: [plan]
    condition: succeeded('plan')
    jobs:
      - job: terraform_apply_production
        steps:
        - task: TerraformInstaller@1
          displayName: 'install'
          inputs:
            terraformVersion: ${{ variables.terraform_version}}
        - task: TerraformTaskV4@4
          displayName: 'init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: ${{ variables.backendServiceArm }}
            backendAzureRmResourceGroupName: ${{ variables.backendAzureRmResourceGroupName }}
            backendAzureRmStorageAccountName: ${{ variables.backendAzureRmStorageAccountName }}
            backendAzureRmContainerName: ${{ variables.backendAzureRmContainerName }}
            backendAzureRmKey: ${{ variables.backendAzureRmKey }} 
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
        - task: TerraformTaskV4@4
          displayName: 'apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: '-input=false -auto-approve -var-file="../vars/${{ variables.environment }}.tfvars"'
            environmentServiceNameAzureRM: ${{ variables.backendServiceArm }}
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

  - stage: Build
    displayName: Build and push image
    jobs:  
    - job: Build
      displayName: Build job
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          command: buildAndPush
          repository: ${{ variables.repository }}
          dockerfile: ${{ variables.dockerfile }}
          containerRegistry: ${{ variables.containerRegistry }}
          tags: $(Build.BuildId)

  - stage: aks_deploy
    displayName: Deploy aspnet app to AKS
    jobs:  
    - job: Build
      displayName: Build job
      steps:
      - task: AzureCLI@2
        displayName: 'Configure AKS Cluster'
        inputs:
          azureSubscription: ${{ variables.backendServiceArm }}
          scriptType: bash
          scriptLocation: inlineScript
          addSpnToEnvironment: true
          inlineScript: |
            #!/usr/bin/env bash
            set -x
            AKS_RG="devopsjourneymay2024-rg"
            AKS_NAME="devopsjourneymay2024"
            helm_resource_namespace="azure-alb-system"
            VNET_NAME="devopsjourneymay2024-vnet"
            ALB_SUBNET_NAME="appgw"
            ALB_CONTROLLER_VERSION="1.0.0"

            # Get AKS Credentials
            az aks get-credentials -g $AKS_RG -n $AKS_NAME --admin

            # Create secret
            kubectl -n sampleapp create secret generic aikey --from-literal=aisecret=$(AIKEY)

            # Install gateway API CRDs curl -L -O $(curl -s https://api.github.com/repos/kubernetes-sigs/gateway-api/releases/latest | grep 'browser_' | cut -d\" -f4)
            kubectl apply -f pipelines/scripts/gatewayapi/gatewayapi.yaml 

            #create namespace for the ALB controller
            kubectl create namespace $helm_resource_namespace

            helm install alb-controller oci://mcr.microsoft.com/application-lb/charts/alb-controller --namespace $helm_resource_namespace --version $ALB_CONTROLLER_VERSION --set albController.namespace=$helm_resource_namespace --set albController.podIdentity.clientID=$(az identity show -g $AKS_RG -n azure-alb-identity --query clientId -o tsv)

            # Apply alb
            kubectl apply -f pipelines/scripts/alb.yaml
            # Apply app
            kubectl apply -f pipelines/scripts/aspnet.yaml 